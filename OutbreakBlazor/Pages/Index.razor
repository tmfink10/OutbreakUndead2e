@page "/"
@using InputType = BlazorStrap.InputType
@using Color = BlazorStrap.Color
@inherits IndexBase



@if (CreateNew == false)
{
    <h1 style="margin-bottom: 20px" class="outbreak-header">Outbreak Undead 2e: Character Creator</h1>

    <p>
        Welcome to the character creator beta test. <br /><br />
        <b>To learn more about most things, just click that thing's name. Try it out by clicking on More Information below.</b><br /><br />
        <div @onclick="@ToggleWelcomeModal">More Information</div><br /><br />

        Character creation happens in three phases: <br />
        1) Choose your character's core traits such as Name, Age, and S.P.E.W. attributes.<br />
        2) Choose your character's abilities.<br />
        3) Update your character's skills.<br /><br />

        You will spend Gestalt in each of the three phases to advance your stats. How to spend Gestalt is entirely a matter of preference. <br />
        If you are unsure of where to start, try allocating it 1/3 to each of S.P.E.W Attributes, Abilities and Skills.<br />
        Generally speaking, Attributes affect a wide variety of skills by a little bit. Abilities allow you to advance certain Skills more easily and<br />
        may provide additional bonuses. Skills are the core of your competency; the chance of your success expressed as a percentage.<br /><br />

        Note, your GM may assign certain values to your character, like Gestalt, that differ from what is presented here. <br />
        In that case, type in the numbers you need to start with...this is only a template, based on one way to create a character. <br /> <br />

        Striking the right balance between restrictive guidance and creative freedom is rather difficult.<br />
        Just because you CAN do something in this tool does not mean that you SHOULD do it.<br />
        If you are using this tool reasonably, it should respond in kind. If you wish to break it, it will let you.<br /><br />

        Best of luck in your campaign and may the dice roll ever in your favor.<br /><br />
    </p>
    <button class="btn btn-specialize" @onclick="HandleNewCharacterClick">Create New Character</button>

    <BSModal @ref="WelcomeModal" IsCentered="true">
        <BSModalHeader OnClick="@ToggleWelcomeModal">More Information</BSModalHeader>
        <BSModalBody>
            <p>
                Clicking on the text of interest to you will pull up a modal window with more information, where available.<br /><br />
                All Attributes, Abilities, and Skills have more information behind them.
            </p>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" Color="BlazorStrap.Color.Primary" OnClick="@ToggleWelcomeModal">Ok</BSButton>
        </BSModalFooter>
    </BSModal>
}
else
{
    <div class="w3-sidebar w3-bar-block" style="width: 25%; right: 0;" id="rightSidebar">
        @if (AddSkills)
        {
            <div align="center" style="padding-bottom: 20px; padding-top: 10px">
                <button class="btn btn-prize" style="width: 250px; height: 50px;" @onclick="ToggleCharacterSheetModal">Generate Character</button>
            </div>
        }
        <h2 align="center" class="outbreak-red" style="font-weight: bold">Resources</h2><br />
        <div class="outbreak-resources">
            <div class="outbreak-resource-child">
                <label class="outbreak-sidebar-spew outbreak-red" style="font-weight: bold">S</label>
                <div class="quantity outbreak-sidebar-spew">
                    <input type="number"
                           class="quantity outbreak-sidebar-spew"
                           style="@HighlightStrength"
                           disabled
                           @bind-value="@ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Strength").Points" />
                </div>
            </div>
            <div class="outbreak-resource-child">
                <label class="outbreak-sidebar-spew outbreak-red" style="font-weight: bold">P</label>
                <div class="quantity outbreak-sidebar-spew">
                    <input type="number"
                           class="quantity outbreak-sidebar-spew"
                           disabled
                           style="@HighlightPerception"
                           @bind-value="@ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Perception").Points" />
                </div>
            </div>
            <div class="outbreak-resource-child">
                <label class="outbreak-sidebar-spew outbreak-red" style="font-weight: bold">E</label>
                <div class="quantity outbreak-sidebar-spew">
                    <input type="number"
                           class="quantity outbreak-sidebar-spew"
                           disabled
                           style="@HighlightEmpathy"
                           @bind-value="@ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Empathy").Points" />
                </div>
            </div>
            <div class="outbreak-resource-child">
                <label class="outbreak-sidebar-spew outbreak-red" style="font-weight: bold">W</label>
                <div class="quantity outbreak-sidebar-spew">
                    <input type="number"
                           class="quantity outbreak-sidebar-spew"
                           disabled
                           style="@HighlightWillpower"
                           @bind-value="@ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Willpower").Points" />
                </div>
            </div>
        </div>
        <div class="outbreak-resources">
            <div class="outbreak-resource-child">
                <label class="outbreak-red outbreak-sidebar-spew" style="width: 160px; font-weight: bold">Gestalt</label>
                <div class="quantity">
                    <input type="number"
                           class="quantity"
                           disabled
                           style="@HighlightGestalt"
                           @bind-value="@ThisCharacter.GestaltLevel" />
                </div>
            </div>
        </div>

        <h2 align="center" class="outbreak-red" style="font-weight: bold">Log</h2>
        @foreach (var action in ActionsLog)
        {
            <span>@((MarkupString)action)</span><br />
        }

    </div>


    <h1 style="margin-bottom: 60px" align="center" class="col-md-8 outbreak-header">Outbreak Undead 2e: Character Creator</h1>
    <h2 style="margin-bottom: 10px" align="center" class="col-md-8 outbreak-category">Basic Information</h2>
    <div class="outbreak-resources col-md-8">
        <div class="outbreak-resource-child" style="flex-grow: 2; padding-right: 1.8rem;">
            <label for="firstname" class="outbreak-label" style="padding-bottom: 0.9rem; text-align:left;">First Name</label><br />
            <input type="text" id="firstname" placeholder="First Name" class="form-control" @bind-value="ThisCharacter.FirstName" />
        </div>
        <div class="outbreak-resource-child" style="flex-grow: 2; padding-right: 1.8rem;">
            <label for="lastname" class="outbreak-label" style="padding-bottom: 0.9rem; text-align:left;">Last Name</label><br />
            <input type="text" id="lastname" placeholder="Last Name" class="form-control" @bind-value="ThisCharacter.LastName" />
        </div>
        <div class="outbreak-resource-child" style="flex-grow: 1">
            <label for="age" class="outbreak-label" @onclick="OnStrengthToggle">Age</label>
            <div class="quantity" id="age">
                <button class="btn" @onclick="@(HandleDecreaseAge)">&lt;</button>
                <input type="number" class="quantity" @bind-value="@ThisCharacter.Age" @onfocus="(SetAge)" @onblur="(UpdateAge)" />
                <button class="btn" @onclick="@(HandleIncreaseAge)">&gt;</button>
            </div>
        </div>
    </div>

    @if (StartingAttributePoints > 0)
    {
        <h2 style="margin-bottom: 10px; margin-top: 20px" align="center" class="col-md-8 outbreak-category">S.P.E.W Attributes</h2>
        <p style="margin-bottom: 10px; font-size: 1.4rem; background-color: rgba(50, 168, 52, 0.3)" align="center" class="col-md-8">You may allocate @StartingAttributePoints point(s) for free</p>
    }
    else
    {
        <h2 style="margin-bottom: 10px; margin-top: 20px" align="center" class="col-md-8 outbreak-category">S.P.E.W Attributes</h2>
    }
    <div class="outbreak-resources col-md-8">
        <div class="outbreak-resource-child">
            <label for="strength" class="outbreak-label" @onclick="OnStrengthToggle">Strength</label>
            <div class="quantity" id="strength">
                <button class="btn" @onclick="@(()=>HandleDecreasePlayerAttribute(ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Strength")))">&lt;</button>
                <input type="number" class="quantity" disabled @bind-value="@ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Strength").Value" />
                <button class="btn" @onclick="@(() => HandleIncreasePlayerAttribute(ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Strength")))">&gt;</button>
            </div>
            <label for="strength" class="outbreak-label">Points: @ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Strength").Points</label>
        </div>
        <div class="outbreak-resource-child">
            <label for="perception" class="outbreak-label" @onclick="OnPerceptionToggle">Perception</label>
            <div class="quantity" id="perception">
                <button class="btn" @onclick="@(()=>HandleDecreasePlayerAttribute(ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Perception")))">&lt;</button>
                <input type="number" class="quantity" disabled @bind-value="@ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Perception").Value" />
                <button class="btn" @onclick="@(() => HandleIncreasePlayerAttribute(ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Perception")))">&gt;</button>
            </div>
            <label for="perception" class="outbreak-label">Points: @ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Perception").Points</label>
        </div>
        <div class="outbreak-resource-child">
            <label for="empathy" class="outbreak-label" @onclick="OnEmpathyToggle">Empathy</label>
            <div class="quantity" id="empathy">
                <button class="btn" @onclick="@(()=>HandleDecreasePlayerAttribute(ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Empathy")))">&lt;</button>
                <input type="number" class="quantity" disabled @bind-value="@ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Empathy").Value" />
                <button class="btn" @onclick="@(() => HandleIncreasePlayerAttribute(ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Empathy")))">&gt;</button>
            </div>
            <label for="empathy" class="outbreak-label">Points: @ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Empathy").Points</label>
        </div>
        <div class="outbreak-resource-child">
            <label for="willpower" class="outbreak-label" @onclick="OnWillpowerToggle">Willpower</label>
            <div class="quantity" id="willpower">
                <button class="btn" @onclick="@(()=>HandleDecreasePlayerAttribute(ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Willpower")))">&lt;</button>
                <input type="number" class="quantity" disabled @bind-value="@ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Willpower").Value" />
                <button class="btn" @onclick="@(() => HandleIncreasePlayerAttribute(ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Willpower")))">&gt;</button>
            </div>
            <label for="willpower" class="outbreak-label">Points: @ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Willpower").Points</label>
        </div>
    </div>

    <h2 style="margin-bottom: 10px; margin-top: 20px" align="center" class="col-md-8 outbreak-category">Character Resources</h2>
    <div class="outbreak-resources col-md-8">
        <div class="outbreak-resource-child">
            <label for="strength" class="outbreak-label outbreak-wide" @onclick="ToggleSurvivalPointsDescription">Survival Points</label>
            <div class="quantity outbreak-wide" id="strength">
                <button class="btn" @onclick="@(()=>ThisCharacter.SurvivalPoints -= 1)">&lt;</button>
                <input type="number" class="quantity" style="width: 90px" @bind-value="@ThisCharacter.SurvivalPoints" />
                <button class="btn" @onclick="@(() => ThisCharacter.SurvivalPoints += 1)">&gt;</button>
            </div>
        </div>
        <div class="outbreak-resource-child">
            <label for="strength" class="outbreak-label outbreak-wide" @onclick="ToggleGestaltDescription">Gestalt Level</label>
            <div class="quantity outbreak-wide" id="strength">
                <button class="btn" @onclick="@(()=>ThisCharacter.GestaltLevel -= 1)">&lt;</button>
                <input type="number" class="quantity" style="width: 90px" @bind-value="@ThisCharacter.GestaltLevel" />
                <button class="btn" @onclick="@(() => ThisCharacter.GestaltLevel += 1)">&gt;</button>
            </div>
        </div>
        <div class="outbreak-resource-child">
            <label for="strength" class="outbreak-label outbreak-wide" @onclick="ToggleCompetencePointsDescription">Competence Points</label>
            <div class="quantity outbreak-wide" id="strength">
                <button class="btn" @onclick="@(()=>ThisCharacter.CompetencePoints -= 1)">&lt;</button>
                <input type="number" class="quantity" style="width: 90px" @bind-value="@ThisCharacter.CompetencePoints" />
                <button class="btn" @onclick="@(() => ThisCharacter.CompetencePoints += 1)">&gt;</button>
            </div>
        </div>
    </div>
    <EditForm Model="ThisCharacter" OnValidSubmit="DoNothing" style="margin-bottom: 15px">
        <BSFormGroup>



        </BSFormGroup>

        @if (AddAbilities == false)
        {
            <div class="text-centered col-md-8">
                <button class="btn btn-specialize" style="width: 45%" @onclick="HandleOnValidPlayerCharacterSubmit">Continue</button>
            </div>
        }

    </EditForm>

    @if (AddAbilities == false)
    {

    }
    else
    {
        <h2 style="margin-bottom: 10px; margin-top: 20px" align="center" class="col-md-8 outbreak-category">Abilities</h2>

        <BSForm Model="Helper" IsInline="true" OnValidSubmit="HandleOnValidBaseAbilitySubmit" style="margin-bottom: 10px">
            <BSFormGroup Class="col-md-8">
                <BSBasicInput Id="baseAbility"
                              InputType="InputType.Select"
                              @bind-Value="Helper.FormString"
                              style="width: 75%; margin-right: 20px;">
                    <option value="">Select Ability</option>
                    @foreach (var ability in BaseAbilities)
                            {
                        <option value="@ability.Id">@ability.Name</option>
                            }
                </BSBasicInput>
                <BSButton Id="formSubmit"
                          Class="btn-specialize"
                          Color="BlazorStrap.Color.Primary"
                          ButtonType="ButtonType.Submit"
                          style="margin-right: 20px;">Add</BSButton>
                <BSButton Id="baseAbilityDetails"
                          Class="btn-specialize"
                          ButtonType="ButtonType.Button"
                          OnClick="(() => OnBaseAbilityToggleOn(BaseAbilities.FirstOrDefault(a => a.Id == Int32.Parse(Helper.FormString))))"
                          IsDisabled="string.IsNullOrWhiteSpace(Helper.FormString)">Description</BSButton>
            </BSFormGroup>
        </BSForm>
        @if (ThisCharacter.PlayerAbilities.Count > 0)
        {
            <div class="skills-table-wrapper col-md-8">
                <div class="abilities-table">
                    <table>
                        @foreach (var ability in ThisCharacter.PlayerAbilities)
                        {
                            <tbody>
                                <tr>
                                    <td class="ability-text" @onclick="@(() => OnBaseAbilityToggleOn(ability.BaseAbility))">@ability.BaseAbility.ShortName (@ability.AddedUsingBaseAttributeCode)</td>
                                    <td class="ability-control">
                                        <div class="quantity">
                                            <button class="btn" @onclick="(()=>HandleDecreasePlayerAbility(ability))">&lt;</button>
                                            <input type="number" class="quantity" disabled @bind-value="@ability.Tier" />
                                            <button class="btn" @onclick="(()=>HandleIncreasePlayerAbility(ability))">&gt;</button>
                                        </div>
                                    </td>
                                    <td class="ability-text ability-notes">
                                        <input type="text" class="form-control" size="60" width="300px" placeholder="Notes" @bind-value="@ability.Notes" />
                                    </td>
                                    <td class="ability-button">
                                        <button class="ability-delete" @onclick="(() => DeletePlayerAbility(ability))">X</button>
                                    </td>
                                </tr>
                            </tbody>
                        }
                    </table>
                </div>
            </div>
        }

        @if (AddSkills == false)
        {
            <div class="text-centered col-md-8">
                <BSButton class="btn btn-specialize" style="width: 45%" @onclick="HandleToggleSkills">Continue</BSButton>
            </div>
        }
        else
        {
            <h2 style="margin-bottom: 10px; margin-top: 20px" align="center" class="col-md-8 outbreak-category">Skills</h2>
            <div>
                <h3 class="col-md-8 text-center outbreak-subcategory">Basic Skills</h3>
            </div>

            <div class="skills-table-wrapper col-md-8">
                <div class="skills-table">
                    <table>
                        <tbody>
                            @foreach (var skill in BasicSkillsLeftTable)
                            {
                                <tr>
                                    <td @onclick="(() => OnBaseSkillToggleOn(skill.BaseSkill))">@skill.BaseSkill.ShortName</td>
                                    <td>
                                        <div class="quantity">
                                            <button class="btn" @onclick="(() => HandleDecreasePlayerSkill(skill))">&lt;</button>
                                            <input type="number" class="quantity" disabled @bind-value="@skill.Value" />
                                            <button class="btn" @onclick="(() => HandleIncreasePlayerSkill(skill))">&gt;</button>
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-specialize" @onclick="(() => HandleSpecializeSkill(skill))">Specialize</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="skills-table">
                    <table>
                        <tbody>
                            @foreach (var skill in BasicSkillsRightTable)
                            {
                                <tr>
                                    <td @onclick="(() => OnBaseSkillToggleOn(skill.BaseSkill))">@skill.BaseSkill.ShortName</td>
                                    <td>
                                        <div class="quantity">
                                            <button class="btn" @onclick="(() => HandleDecreasePlayerSkill(skill))">&lt;</button>
                                            <input type="number" class="quantity" disabled @bind-value="@skill.Value" />
                                            <button class="btn" @onclick="(() => HandleIncreasePlayerSkill(skill))">&gt;</button>
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-specialize" @onclick="(() => HandleSpecializeSkill(skill))">Specialize</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <br />
            <div>
                <h3 class="col-md-8 text-center outbreak-subcategory">Trained Skills</h3>
            </div>
            <br />

            <div class="skills-table-wrapper col-md-8">
                <div class="skills-table">
                    <table>
                        <tbody>
                            @foreach (var skill in TrainedSkillsLeftTable)
                            {
                                <tr>
                                    <td @onclick="(() => OnBaseSkillToggleOn(skill.BaseSkill))">@skill.BaseSkill.ShortName</td>
                                    <td>
                                        <div class="quantity">
                                            <button class="btn" @onclick="(() => HandleDecreasePlayerSkill(skill))">&lt;</button>
                                            <input type="number" class="quantity" disabled @bind-value="@skill.Value" />
                                            <button class="btn" @onclick="(() => HandleIncreasePlayerSkill(skill))">&gt;</button>
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-specialize" @onclick="(() => HandleSpecializeSkill(skill))">Specialize</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="skills-table">
                    <table>
                        <tbody>
                            @foreach (var skill in TrainedSkillsRightTable)
                            {
                                <tr>
                                    <td @onclick="(() => OnBaseSkillToggleOn(skill.BaseSkill))">@skill.BaseSkill.ShortName</td>
                                    <td>
                                        <div class="quantity">
                                            <button class="btn" @onclick="(() => HandleDecreasePlayerSkill(skill))">&lt;</button>
                                            <input type="number" class="quantity" disabled @bind-value="@skill.Value" />
                                            <button class="btn" @onclick="(() => HandleIncreasePlayerSkill(skill))">&gt;</button>
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-specialize" @onclick="(() => HandleSpecializeSkill(skill))">Specialize</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <br />
            <div>
                <h3 class="col-md-8 text-center outbreak-subcategory">Expert Skills</h3>
            </div>
            <br />

            <div class="skills-table-wrapper col-md-8">
                <div class="skills-table">
                    <table>
                        <tbody>
                            @foreach (var skill in ExpertSkillsLeftTable)
                            {
                                <tr>
                                    <td @onclick="(() => OnBaseSkillToggleOn(skill.BaseSkill))">@skill.BaseSkill.ShortName</td>
                                    <td>
                                        <div class="quantity">
                                            <button class="btn" @onclick="(() => HandleDecreasePlayerSkill(skill))">&lt;</button>
                                            <input type="number" class="quantity" disabled @bind-value="@skill.Value" />
                                            <button class="btn" @onclick="(() => HandleIncreasePlayerSkill(skill))">&gt;</button>
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-specialize" @onclick="(() => HandleSpecializeSkill(skill))">Specialize</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="skills-table">
                    <table>
                        <tbody>
                            @foreach (var skill in ExpertSkillsRightTable)
                            {
                                <tr>
                                    <td @onclick="(() => OnBaseSkillToggleOn(skill.BaseSkill))">@skill.BaseSkill.ShortName</td>
                                    <td>
                                        <div class="quantity">
                                            <button class="btn" @onclick="(() => HandleDecreasePlayerSkill(skill))">&lt;</button>
                                            <input type="number" class="quantity" disabled @bind-value="@skill.Value" />
                                            <button class="btn" @onclick="(() => HandleIncreasePlayerSkill(skill))">&gt;</button>
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-specialize" @onclick="(() => HandleSpecializeSkill(skill))">Specialize</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        @if (ThisCharacter.SpecializedPlayerSkills.Count > 0)
        {
            <h4 style="margin-bottom: 10px; margin-top: 20px" align="center" class="col-md-8 outbreak-subcategory">Specialized Skills</h4>

            <div class="skills-table-wrapper col-md-8">
                <div class="skills-table">
                    <table>
                        <tbody>
                            @foreach (var skill in SpecializedSkillsLeftTable)
                            {
                                <tr>
                                    <td @onclick="(() => OnBaseSkillToggleOn(skill.BaseSkill))">@skill.Specialty</td>
                                    <td>
                                        <div class="quantity">
                                            <button class="btn" @onclick="(() => HandleDecreasePlayerSkill(skill))">&lt;</button>
                                            <input type="number" class="quantity" disabled @bind-value="@skill.Value" />
                                            <button class="btn" @onclick="(() => HandleIncreasePlayerSkill(skill))">&gt;</button>
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-specialize" @onclick="(() => HandleRemovePlayerSkill(skill))">Remove</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="skills-table">
                    <table>
                        <tbody>
                            @foreach (var skill in SpecializedSkillsRightTable)
                            {
                                <tr>
                                    <td @onclick="(() => OnBaseSkillToggleOn(skill.BaseSkill))">@skill.Specialty</td>
                                    <td>
                                        <div class="quantity">
                                            <button class="btn" @onclick="(() => HandleDecreasePlayerSkill(skill))">&lt;</button>
                                            <input type="number" class="quantity" disabled @bind-value="@skill.Value" />
                                            <button class="btn" @onclick="(() => HandleIncreasePlayerSkill(skill))">&gt;</button>
                                        </div>
                                    </td>
                                    <td>
                                        <button class="btn btn-specialize" @onclick="(() => HandleRemovePlayerSkill(skill))">Remove</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        <h2 style="margin-bottom: 10px; margin-top: 20px" align="center" class="col-md-8 outbreak-category">Training Values</h2>
        <div class="card-columns col-md-8">
            @foreach (var value in ThisCharacter.TrainingValues)
            {
                <BSCard Alignment="Alignment.Center">
                    <BSCard CardType="CardType.Header">
                        <BSCard CardType="CardType.Title">@value.BaseTrainingValue.Name</BSCard>
                    </BSCard>
                    <BSCard CardType="CardType.Body" Class="text-lg-center">@value.Value</BSCard>
                </BSCard>
            }
        </div>
    }

    <BSModal @ref="CharacterSheetModal" IsFullScreen="true">
        <BSModalHeader OnClick="ToggleCharacterSheetModal">Download or Print</BSModalHeader>
        <BSModalBody>
            <iframe src="@CharacterSheetLocation" height="100%" width="100%"></iframe>
        </BSModalBody>
    </BSModal>

    <BSModal @ref="GestaltDescription" IsCentered="true">
        <BSModalHeader OnClick="@ToggleGestaltDescription">Gestalt</BSModalHeader>
        <BSModalBody>
            <p>
                Gestalt is an additional statistic that is a measure of character knowledge versus player knowledge.
                When playing Yourself as a Character, these are generally considered to be the same, but even in that situation there will eventually be a large disparity between what the character knows and what a player knows.
                For this reason, players who wish to appeal to character knowledge over their own can treat a character’s Gestalt Level as being a Primary Attribute to checks of this kind.
                Gestalt Levels are reduced for characters to advance Core Attributes, Skills and Traits. In this case the generalized knowledge represented by Gestalt Level is given a more specific outlet.
            </p>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" Color="BlazorStrap.Color.Primary" OnClick="@ToggleGestaltDescription">Ok</BSButton>
        </BSModalFooter>
    </BSModal>
    <BSModal @ref="SurvivalPointsDescription" IsCentered="true">
        <BSModalHeader OnClick="@ToggleSurvivalPointsDescription">Survival Points</BSModalHeader>
        <BSModalBody>
            <p>
                Survival Points are a resource earned by characters from undertaking Missions and completing Objectives.
                These can be used to increase Gestalt Level but they are also used for other purposes such as acquiring useful Gear and activating special Tactics in the field.
                This is the most useful of a player character’s resources because it is so multi-purpose in application. Survival Points are also lost when characters (or their fellow survivors) get injured or die.
                This provides a metagame escape hatch that allows a character that suffers a fatal injury to survive by sacrificing some of their Survival Points to represent
                the poor choices that the player character made that ultimately got them injured or killed.
            </p>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" Color="BlazorStrap.Color.Primary" OnClick="@ToggleSurvivalPointsDescription">Ok</BSButton>
        </BSModalFooter>
    </BSModal>
    <BSModal @ref="CompetencePointsDescription" IsCentered="true">
        <BSModalHeader OnClick="@ToggleCompetencePointsDescription">Competence Points</BSModalHeader>
        <BSModalBody>
            <p>
                A player can represent their character’s own passive efforts, knowledge and skills. All characters and non-player characters have time throughout the day to do tasks.
                General upkeep is determined by a general Labor Value to determine how much maintenance a character, their gear and Stronghold needs.
                By sticking to “Plan A” they have an increased ability to accomplish these tasks quickly and without incident. This is represented with Competence Points (CP).
                Competence Points are not an Attribute or a stat, since all characters and non-player characters have the same hours in the day to spend doing things,
                and what they do can play to their strengths and serve a variety of needs, both immediate and long term.<br /> <br />

                At the beginning of each day or start of each session, a character has access to a certain number of Competence Points.
            </p>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" Color="BlazorStrap.Color.Primary" OnClick="@ToggleCompetencePointsDescription">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="StrengthDescription" IsCentered="true">
        <BSModalHeader OnClick="@OnStrengthToggle">Strength</BSModalHeader>
        <BSModalBody>
            <p>@((MarkupString) ThisCharacter.PlayerAttributes.FirstOrDefault(a => a.BaseAttribute.Name == "Strength").BaseAttribute.HtmlDescription)</p>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" Color="BlazorStrap.Color.Primary" OnClick="@OnStrengthToggle">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="PerceptionDescription" IsCentered="true">
        <BSModalHeader OnClick="@OnPerceptionToggle">Perception</BSModalHeader>
        <BSModalBody>
            <p>@((MarkupString) PerceptionService.BaseAttribute.HtmlDescription)</p>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" Color="BlazorStrap.Color.Primary" OnClick="@OnPerceptionToggle">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="EmpathyDescription" IsCentered="true">
        <BSModalHeader OnClick="@OnEmpathyToggle">Empathy</BSModalHeader>
        <BSModalBody>
            <p>@((MarkupString) EmpathyService.BaseAttribute.HtmlDescription)</p>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" Color="BlazorStrap.Color.Primary" OnClick="@OnEmpathyToggle">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="WillpowerDescription" IsCentered="true">
        <BSModalHeader OnClick="@OnWillpowerToggle">Willpower</BSModalHeader>
        <BSModalBody>
            <p>@((MarkupString) WillpowerService.BaseAttribute.HtmlDescription)</p>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" Color="BlazorStrap.Color.Primary" OnClick="@OnWillpowerToggle">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="BaseAbilityDescription" IsCentered="true">
        <BSModalHeader OnClick="@OnBaseAbilityToggleOff">@ThisBaseAbility.Name</BSModalHeader>
        <BSModalBody>
            <p>@((MarkupString) ThisBaseAbility.HtmlDescription)</p>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" Color="BlazorStrap.Color.Primary" OnClick="@OnBaseAbilityToggleOff">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="PlayerAbilityAttributeSelection" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
        <EditForm Model="ThisPlayerAbility" OnValidSubmit="UpdateThisPlayerAttribute">
            <BSModalBody>
                <p style="font-size: 1.6rem;">Add @ThisBaseAbility.Name using:</p>
                @if (ThisPlayerAbility.BaseAbility != null)
                {
                    if (ThisPlayerAbility.BaseAbility.UsesBaseAttributes.Count > 1 && ThisPlayerAbility.Tier == 1)
                    {
                        <div class="outbreak-attributes-container">
                            @foreach (var helperClass in Helpers)
                            {
                                <button class="btn btn-specialize @helperClass.Style outbreak-select-button" style="width: 40%;" @onclick="(() => OnSelectAttribute(helperClass))">@helperClass.Name</button>
                            }
                        </div>
                        <br />
                    }
                    else
                    {
                        Disable = false;
                    }

                    @if (ThisPlayerAbility.BaseAbility.IsProfessional)
                    {
                        <BSFormGroup IsCheck="true">
                            <BSInput Id="HasInstruction" InputType="InputType.Checkbox" @bind-Value="HasInstruction" />
                            <BSLabel IsCheck="true" For="HasInstruction">With Instruction</BSLabel>
                        </BSFormGroup>
                    }
                }
                <br />
                <div class="outbreak-button-container">
                    <BSButton Class="btn-specialize" ButtonType="ButtonType.Submit"
                              @onclick="(() => OnPlayerAbilityToggleOff(ThisPlayerAbility, 0))"
                              IsDisabled="@Disable"
                              style="width: 40%">Gestalt Levels</BSButton>
                    <BSButton Class="btn-specialize" ButtonType="ButtonType.Submit"
                              @onclick="(() => OnPlayerAbilityToggleOff(ThisPlayerAbility, 1))"
                              IsDisabled="@Disable"
                              style="width: 40%">Attribute Points</BSButton>
                </div>
            </BSModalBody>
        </EditForm>
    </BSModal>

    <BSModal @ref="BaseSkillDescription" IsCentered="true">
        <BSModalHeader OnClick="@OnBaseSkillToggleOff">@ThisBaseSkill.Name</BSModalHeader>
        <BSModalBody>
            <p>@((MarkupString) ThisBaseSkill.HtmlDescription)</p>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" Color="Color.Primary" OnClick="@OnBaseSkillToggleOff">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="SpecializePlayerSkill" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
        <BSModalHeader>Specialize @ThisPlayerSkill.BaseSkill.Name</BSModalHeader>
        <BSModalBody>
            <BSForm Model="ThisPlayerSkill" OnValidSubmit="(OnSpecializePlayerSkillToggleOff)">
                <BSInput InputType="InputType.Text" @bind-Value="ThisPlayerSkill.Specialty">Specialty:</BSInput>
            </BSForm>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" ButtonType="ButtonType.Submit" OnClick="(OnSpecializePlayerSkillToggleOff)">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="SupportBasicSkill" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
        <BSModalHeader class="outbreak-header">Support Basic Skill</BSModalHeader>
        <BSModalBody>
            <div class="outbreak-container">
                @foreach (var skill in Helpers)
                {
                    <button class="btn btn-specialize @skill.Style outbreak-select-button" style="width: 40%;" @onclick="(() => OnSelectSkillToSupport(skill))">@skill.Name</button>
                }
            </div>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" IsDisabled="@Disable" OnClick="(OnSupportBasicSkillToggleOff)">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="SupportTrainedSkill" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
        <BSModalHeader>Support Trained Skill</BSModalHeader>
        <BSModalBody>
            <div class="outbreak-container">
                @foreach (var skill in Helpers)
                {
                    <button class="btn btn-specialize @skill.Style outbreak-select-button" style="width: 32%; margin:2px" @onclick="(() => OnSelectSkillToSupport(skill))">@skill.Name</button>
                }
            </div>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" IsDisabled="@Disable" OnClick="(OnSupportTrainedSkillToggleOff)">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="SupportExpertSkill" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
        <BSModalHeader>Support Expert Skill</BSModalHeader>
        <BSModalBody>
            <div class="outbreak-container">
                @foreach (var skill in Helpers)
                {
                    <button class="btn btn-specialize @skill.Style outbreak-select-button" style="width: 40%;" @onclick="(() => OnSelectSkillToSupport(skill))">@skill.Name</button>
                }
            </div>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" IsDisabled="@Disable" OnClick="(OnSupportExpertSkillToggleOff)">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="SupportCivilian" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
        <BSModalHeader>Civilian Supports:</BSModalHeader>
        <BSModalBody>
            <div class="outbreak-container" style="height: 790px;">
                @foreach (var skill in Helpers)
                {
                    <button class="btn btn-specialize @skill.Style outbreak-select-button" style="width: 40%;" @onclick="(() => OnSelectSkillToSupport(skill))">@skill.Name</button>
                }
            </div>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" IsDisabled="@Disable" OnClick="(OnSupportCivilianToggleOff)">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="SupportCivilianTrainingValues" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
        <BSModalHeader>Advance 2 Training Values</BSModalHeader>
        <BSModalBody>
            <div class="outbreak-container" style="height: 530px;">
                @foreach (var helperClass in Helpers)
                {
                    <button class="btn btn-specialize @helperClass.Style outbreak-select-button" style="width: 40%;" @onclick="(() => OnSelectTrainingValue(helperClass))">@helperClass.Name</button>
                }
            </div>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" IsDisabled="@Disable" OnClick="(OnSupportCivilianTrainingValuesToggleOff)">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="SupportAthleticConditioning" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
        <BSModalHeader>Select a sport</BSModalHeader>
        <BSModalBody>
            <div class="outbreak-container" style="height: 250px;">
                @foreach (var helperClass in Helpers)
                {
                    <button class="btn btn-specialize @helperClass.Style outbreak-select-button" style="width: 40%;" @onclick="(() => OnSelectSport(helperClass))">@helperClass.Name</button>
                }
            </div>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" IsDisabled="@Disable" OnClick="(OnSupportAthleticConditioningToggleOff)">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="StringSelect" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
        <BSModalHeader>Choose One</BSModalHeader>
        <BSModalBody>
            <div class="outbreak-container" style="height: 100px; justify-content: flex-start">
                @foreach (var option in Helpers)
                {
                    <button class="btn btn-specialize @option.Style outbreak-select-button" style="width: 40%;" @onclick="(() => OnHelperSelect(option))">@option.Name</button>
                }
            </div>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" IsDisabled="@Disable" OnClick="(StringSelectToggleOff)">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="SupportAutodidact" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
        <BSModalHeader>Training Value to Advance</BSModalHeader>
        <BSModalBody>
            <div class="outbreak-container" style="height: 530px;">
                @foreach (var trainingValue in Helpers)
                {
                    <button class="btn btn-specialize @trainingValue.Style outbreak-select-button" style="width: 40%;" @onclick="(() => OnSelectSingleTrainingValue(trainingValue))">@trainingValue.Name</button>
                }
            </div>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" IsDisabled="@Disable" OnClick="(OnSupportAutodidactToggleOff)">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="SelectTrainingValue" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
        <BSModalHeader>Choose One</BSModalHeader>
        <BSModalBody>
            <div class="outbreak-container" style="height: 100px; justify-content: flex-start">
                @foreach (var option in Helpers)
                {
                    <button class="btn btn-specialize @option.Style outbreak-select-button" style="width: 40%;" @onclick="(() => OnHelperSelect(option))">@option.Name</button>
                }
            </div>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" IsDisabled="@Disable" OnClick="(SelectTrainingValueToggleOff)">Ok</BSButton>
        </BSModalFooter>
    </BSModal>

    <BSModal @ref="SupportWeekendWarrior" IsCentered="true" IgnoreClickOnBackdrop="true" IgnoreEscape="true">
        <BSModalHeader>Choose One</BSModalHeader>
        <BSModalBody>
            <div class="outbreak-container" style="height: 100px; justify-content: flex-start">
                @foreach (var option in Helpers)
                {
                    <button class="btn btn-specialize @option.Style outbreak-select-button" style="width: 40%;" @onclick="(() => OnHelperSelect(option))">@option.Name</button>
                }
            </div>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Class="btn-specialize" IsDisabled="@Disable" OnClick="(OnSupportWeekendWarriorToggleOff)">Ok</BSButton>
        </BSModalFooter>
    </BSModal>
}